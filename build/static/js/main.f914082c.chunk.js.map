{"version":3,"sources":["App.js","utils.js","index.js"],"names":["App","className","id","React","Component","getCookie","key","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","renderApp","ReactDOM","render","getElementById","window","location","port","console","log","username","password","callback","postData","fetch","method","headers","body","JSON","stringify","then","response","json","data","val","d","Date","setTime","getTime","days","expires","toUTCString","setCookie","access_token","setAccessTokenCookie"],"mappings":"4NAGMA,E,4JAEF,WACI,OACI,gCAEA,qBAAKC,UAAU,WAAf,SACI,6CAIJ,kCACI,6CAIA,sBAAKA,UAAU,cAAf,UACI,mBAAGA,UAAU,kBAAb,iCACA,oDAOR,uBAAMA,UAAU,UAAhB,UACI,wBAAQA,UAAU,UAAlB,qBAIA,qBAAKC,GAAG,QAAR,6B,GA9BEC,IAAMC,WAyCTJ,I,MC5Cf,SAASK,EAAWC,GAIhB,IAHA,IAAIC,EAAOD,EAAM,IAEbE,EADgBC,mBAAmBC,SAASC,QACzBC,MAAM,KACpBC,EAAI,EAAGA,EAAIL,EAAGM,OAAQD,IAAK,CAEhC,IADA,IAAIE,EAAIP,EAAGK,GACY,MAAhBE,EAAEC,OAAO,IACZD,EAAIA,EAAEE,UAAU,GAEpB,GAAwB,IAApBF,EAAEG,QAAQX,GACV,OAAOQ,EAAEE,UAAUV,EAAKO,OAAQC,EAAED,QAG1C,MAAO,GCPX,SAASK,IACLC,IAASC,OACL,cAAC,EAAD,IACAX,SAASY,eAAe,SDoCrBjB,EAAU,sBCf0B,SAAzBkB,OAAOC,SAASC,MAElCC,QAAQC,IAAI,uDACZR,MAEAO,QAAQC,IAA6B,SAAzBJ,OAAOC,SAASC,MAE5BC,QAAQC,IAAI,8CDbT,SAA8BC,EAAUC,EAAUC,GACrD,IAAMC,EAAW,CACb,SAAYH,EACZ,SAAYC,GAEhBG,MAAM,cAAe,CACbC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUN,KAExBO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,IArBd,SAAmBlC,EAAMmC,GACrB,IAAMC,EAAI,IAAIC,KAEdD,EAAEE,QAAQF,EAAEG,UAAaC,SACzB,IAAMC,EAAU,WAAYL,EAAEM,cAC9BvC,SAASC,OAASJ,EAAO,IAAMmC,EAAM,IAAMM,EAkBnCE,CAAU,yBADIT,EAAKU,cAEnBrB,OCFRsB,CAAqB,SAAU,WAAYjC,M","file":"static/js/main.f914082c.chunk.js","sourcesContent":["import React from 'react';\n\n{/* TODO: Break up the HTML below into a series of React components. */}\nclass App extends React.Component {  \n\n    render () {\n        return (\n            <div>\n\n            <nav className=\"main-nav\">\n                <h1>Photo App</h1>\n                {/* Navigation Links */}\n            </nav>\n\n            <aside>\n                <header>\n                    Profile\n                    {/* Navigation Links */}\n                </header>\n                <div className=\"suggestions\">\n                    <p className=\"suggestion-text\">Suggestions for you</p>\n                    <div>\n                        Suggestions\n                        {/* Suggestions */}\n                    </div>\n                </div>\n            </aside>\n\n            <main className=\"content\">\n                <header className=\"stories\">\n                    Stories\n                    {/* Stories */}\n                </header>\n                <div id=\"posts\">\n                    Posts\n                    {/* Posts */}\n                </div>\n            </main>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","function getCookie (key) {\n    let name = key + \"=\";\n    let decodedCookie = decodeURIComponent(document.cookie);\n    let ca = decodedCookie.split(';');\n    for (let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}\n\nfunction setCookie(name, val) {\n    const d = new Date();\n    const days = 365;\n    d.setTime(d.getTime() + (days*24*60*60*1000));\n    const expires = \"expires=\"+ d.toUTCString();\n    document.cookie = name + \"=\" + val + \";\" + expires;\n  }\n\nexport function setAccessTokenCookie(username, password, callback) {\n    const postData = {\n        \"username\": username,\n        \"password\": password\n    };\n    fetch(\"/api/token/\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(postData)\n        })\n        .then(response => response.json())\n        .then(data => {\n            const token = data.access_token;\n            setCookie('access_token_cookie_js', token); \n            callback();\n        });\n}\n\nexport function hasCsrfToken () {\n    return getCookie('csrf_access_token'); // || token;\n}\n\nexport function getAccessTokenCookie () {\n    return getCookie('access_token_cookie_js'); // || token;\n}\n\nexport function getHeaders () {\n    const access_token_cookie_js = getCookie('access_token_cookie_js');\n    const csrf_access_token = getCookie('csrf_access_token');\n    let headers;\n    if (csrf_access_token && window.location.port !== '3000') {\n        headers = {\n            'Content-Type': 'application/json',\n            'X-CSRF-TOKEN': csrf_access_token\n        };\n    } else if (access_token_cookie_js) {\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + access_token_cookie_js\n        };\n    } else {\n        console.error('Neither access_token_cookie nor csrf_access_token found')\n    }\n    return headers;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport {hasCsrfToken, setAccessTokenCookie} from './utils';\n\nfunction renderApp() {\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    );\n}\n\n/**************************************************************\n * Authentication\n **************************************************************\n * There are two authentication pathways handled here:\n * 1. The hasCsrfToken() pathway is used if React is being\n *    served on the same server as the REST API (and uses the\n *    Flask server-side login form). For production deployment\n *    only.\n * \n * 2. The setAccessTokenCookie() pathway is used if you have\n *    created a stand-alone react app that is interacting with\n *    the REST API on another server. This one is the one used\n *    for testing (when using npm start).\n **************************************************************\n */\n\n// this initializes the app after the access token is set.\nif (hasCsrfToken() && window.location.port !== '3000') {\n    // this executes if the app is run within flask:\n    console.log('Authentication handled via CSRF + Http-only cookie.')\n    renderApp();\n} else {\n    console.log(window.location.port === '3000')\n    // this executes if the app is run via npm start\n    console.log('Authentication handled via REST API Token.')\n    setAccessTokenCookie('webdev', 'password', renderApp);\n}"],"sourceRoot":""}